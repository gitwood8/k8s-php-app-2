name: Wood-CI-CD-AWS
env:
  CI_IMAGE_NAME: "image-${{ github.sha }}"
  CI_CONTAINER_NAME: "test-container"
  CONTAINER_EXTERNAL_PORT: 5555
  AWS_REPOSITORY_NAME: "k8s-php-app"

#  CD_IMAGE_REPO_USER: "wood8"
#  CD_IMAGE_NAME_VERSION: "github-actions-cicd"
  AWS_REGION: "eu-west-2"
on:
  push:
    branches:
      - main
jobs:
  build-container-test:
    runs-on: ubuntu-latest
    steps:
      - name: Clone git repo
        uses: actions/checkout@v3
        
      - name: Building image
        run: |
          echo -e "\n\n======================= Bilding Image =======================\n\n"
          docker build -t ${{ env.CI_IMAGE_NAME }} .
          echo -e "\n\n======================= Runnig the Container =======================\n\n"
          docker run -d --name ${{ env.CI_CONTAINER_NAME }} -p ${{ env.CONTAINER_EXTERNAL_PORT }}:80 ${{ env.CI_IMAGE_NAME }}
          echo -e "\n\n======================= Health Check Started =======================\n\n"
          sleep 15
          docker inspect --format='{{json .State.Health}}' $(docker ps -q) | grep '\"Status\":\"healthy\"'
          echo -e "\n\n======================= Test Passed =======================\n\n"

  push-to-aws-ecr:
    runs-on: ubuntu-latest
    needs: [build-container-test]
    steps:
      - name: Clone git repo
        uses: actions/checkout@v3

      - uses: azure/setup-kubectl@v3
        with:
           version: 'v1.26.1'
        id: install
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG